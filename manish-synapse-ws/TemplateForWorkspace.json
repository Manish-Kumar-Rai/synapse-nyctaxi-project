{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "manish-synapse-ws"
		},
		"manish-synapse-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'manish-synapse-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:manish-synapse-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"manish-synapse-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlssynnyctaxi.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/manish-synapse-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('manish-synapse-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/manish-synapse-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('manish-synapse-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n--------- Check for duplicates in the Taxi Zone Data\n-------------------------------------------------------------\n----- for locationid\nSELECT\n    LocationID,\n    COUNT(LocationID) AS 'No_of_Occurence'\nFROM \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS [result]\nGROUP BY LocationID\nHAVING COUNT(LocationID) > 1\nORDER BY LocationID;\n\n------ for borough column\nSELECT\n    Borough,\n    COUNT(Borough) AS 'No_of_Occurence'\nFROM \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS [result]\nGROUP BY Borough\nHAVING COUNT(Borough) > 1\nORDER BY Borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Identify any data quality issues in trip total amount\n-------------------------------------------------------------\n\nSELECT\n    MIN(total_amount) AS 'Min_value',\n    MAX(total_amount) AS 'Max_value',\n    AVG(total_amount) AS 'Avg_value',\n    COUNT(1) AS 'total_number_of_records',\n    COUNT(total_amount) AS not_null_total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n\n\nSELECT\n   payment_type, COUNT(*) AS total_number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n-- WHERE total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Identify number of trips made from each borough!\n-------------------------------------------------------------\n\n\nSELECT\n    zone.Borough,\n    COUNT(1) AS Number_Of_Trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data \nJOIN OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS zone\nON trip_data.PULocationID = zone.LocationID\nGROUP BY zone.Borough\nORDER BY Number_Of_Trips;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Number of trips made by duration in hours\n-------------------------------------------------------------\n\nSELECT\n    (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) AS from_hour,\n    (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1 AS to_hour,\n    COUNT(1) AS Number_Of_Trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\nGROUP BY (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60), (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1\nORDER BY (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60), (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlssynnyctaxi.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv', --https\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------------------- Examine the data types for the columns\n\nEXECUTE sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv'', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\n--------------------------------------------- Max Length of each of the columns\n\nSELECT\n    MAX(LEN(LocationID)) AS len_LocationID,\n    MAX(LEN(Borough)) AS len_Borough,\n    MAX(LEN(Zone)) AS len_Zone,\n    MAX(LEN(service_zone)) AS len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n---------------------------------------------  Use WITH Clause to provide explicit data types\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n\n---------------------------------------------  Using Stored Procedure to check the Data Types\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n        \n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]'\n\n\n--------------------------------------------- To check the Collations for our Database\n\nSELECT name, collation_name FROM sys.databases;\n\n\n--------------------------------------------- Specify the Collations with Columns\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    ) AS [result]\n\n\n--------------------------------------------- Specify the Collations with Database\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n--------------------------------------------- Specify the Query for Subset of Columns\n\n-- One Way\nSELECT\n    TOP(5) Borough,\n    Zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n--- Another Way\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', \n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        Borough VARCHAR(15),\n        Zone VARCHAR(50)\n    ) AS [result]\n\n--------------------------------------------- Specify the Query for Subset of Columns (Without Headers)\n\n--- One Way\n\nSELECT\n    TOP(5) Borough , Zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n\n--- Another Way With Positions\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        Borough VARCHAR(15) 2,\n        Zone VARCHAR(50) 3\n    ) AS [result]\n\n--- Another Way With Positions (Changing Order of the Column)\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        -- Changing the order of the Column\n        Zone VARCHAR(50) 3,\n        Borough VARCHAR(15) 2\n    ) AS [result]\n\n\n--------------------------------------------- Skipping First Line (Which is Header)\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        -- Changing columns to small case\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    ) AS [result]\n\n\n--------------------------------------------- Create External Data Source\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/'\n)\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/'\n)\n\n-- DROP EXTERNAL DATA SOURCE nyc_taxi_data;\n\n---------------------------------------------  Query with data source\n\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n    SELECT name, location FROM sys.external_data_sources;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nUSE nyc_taxi_discovery\n\nCREATE EXTERNAL DATA SOURCE calender_data\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/calendar.csv'\n)\n\nSELECT name, location FROM sys.external_data_sources;\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/calendar.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) AS [result]'\n\n\nSELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    AS Calender;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n---- ESCAPE Character file\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\\\',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n----- QUOTE Field\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDQUOTE = '\"',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_tsv_taxi_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "Use nyc_taxi_discovery;\n\nSELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '\\t',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "Use nyc_taxi_discovery;\n\n\n------ Single Line JSON usin JSON_VALUE\n\nSELECT\n    CAST(JSON_VALUE(jsonDoc,'$.payment_type') AS SMALLINT) AS payment_type,\n    CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc') AS VARCHAR(15)) AS payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    CAST(JSON_VALUE(jsonDoc,''$.payment_type'') AS SMALLINT) AS payment_type,\n    CAST(JSON_VALUE(jsonDoc,''$.payment_type_desc'') AS VARCHAR(15)) AS payment_type_desc\nFROM\n    OPENROWSET(\n        BULK ''payment_type.json'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''1.0'' ,\n        FIELDTERMINATOR = ''0x0b'',\n        FIELDQUOTE = ''0x0b'',\n        ROWTERMINATOR = ''0x0a''\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];'\n\n\n------ Single Line JSON usin OPENJSON( Far more efficient than JSON_VALUE)\n\nSELECT\n    payment_type,[description]\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        [description] VARCHAR(15) '$.payment_type_desc '\n    );\n\n------------------------------------------------------------------------------ \n-------------  JSON that contains ARRAY\n------------------------------------------------------------------------------ \n\n--- Using JSON_VALUE\nSELECT\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type') AS SMALLINT) AS payment_type,\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc[0].value') AS VARCHAR(15)) AS payment_type_desc_0,\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc[1].value') AS VARCHAR(15)) AS payment_type_desc_1\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];\n\n\n----Using OPENJSON\n\nSELECT\n   payment_type, payment_type_desc_value\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) AS JSON\n    )\n    CROSS APPLY OPENJSON(payment_type_desc)\n    WITH (\n        sub_type SMALLINT,\n        payment_type_desc_value VARCHAR(15) '$.value'\n    );\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n------------------------------------------------------------------------------ \n-------------  Query Standard JSON\n------------------------------------------------------------------------------ \n\nSELECT\n    rate_code_id,rate_code\nFROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'  --- vertical tab\n    ) \n    WITH (\n        jsonDoc NVARCHAR(MAX) \n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(15)\n    );\n\n\n------------------------------------------------------------------------------ \n-------------  Query Standard JSON\n------------------------------------------------------------------------------\n\nSELECT\n    rate_code_id,rate_code_desc\nFROM\n    OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0b'     ---- '0x0b' is vertical Tab\n    ) \n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    )AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id TINYINT,\n        rate_code_desc VARCHAR(15) '$.rate_code'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n------------------------------ Select data from a file\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ Select data from a folder\n\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',  -----Selecting all csv file in a folder\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ Select data from a subfolder\n\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',  --- Selecting all subfolders and all files in subfolder (**)\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------ Select data from more than one file\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv','trip_data_green_csv/year=2020/month=03/*.csv'),  ---- giving list of files in BULK attribute\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ Select data from all subfolder and all year, all csv files\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------ File metadata function filename()\n\nSELECT\n    TOP(100)\n    [result].filename() AS file_name,\n    [result].*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ To see how many records in each file\n\nSELECT\n    [result].filename() AS file_name,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nGROUP BY [result].filename()\nORDER BY [result].filename()\n\n------------------------------ To see how many records in subset of file\nSELECT\n    [result].filename() AS file_name,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename()\nORDER BY [result].filename()\n\n\n------------------------------ Use filepath function\n\nSELECT\n    [result].filename() AS file_name,\n    [result].filepath() AS file_path,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename(),[result].filepath()\nORDER BY [result].filename(),[result].filepath() \n\n------------------------------ Use filepath function to get year and month\n\nSELECT\n    [result].filename() AS file_name,\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename(),[result].filepath(1),[result].filepath(2)\nORDER BY [result].filename(),[result].filepath(1),[result].filepath(2) \n\n-----------\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2) \n\n------------------------------ Use FILEPATH function in WHERE clause\n\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filepath(2) IN ('01','02','03') AND [result].filepath(1) = '2020'\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2) \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n---- Look for Data Types\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS [result]';\n\n----- Defining Columns and their Data Types\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result];\n\n\n------- Checking data scanned\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       tip_amount FLOAT,\n       trip_type INT\n    )\n    AS [result];\n\n\n\n---------------------------------------------------------------------------------------\n----------------------  ASSIGNMENTS\n---------------------------------------------------------------------------------------\n\n------ 1. Query from folders using wildcard characters\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result];\n\n------ 2. Using filename function\n\nSELECT\n    [result].filename() As File_name,\n    COUNT(1) AS Total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\nGROUP BY [result].filename()\nORDER BY [result].filename();\n\n------ 3. Querying from subfolders\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',   --- ** to query subfolders\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\n\n------ 4. use filepath to select only from certain pertitions\n\nSELECT\n    [result].filepath(1) As [year],\n    [result].filepath(2) AS [month],\n    COUNT(1) AS Total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\nWHERE [result].filepath(1) = '2020' AND ([result].filepath(2) BETWEEN '01' AND '04')\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2);\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\n----- Checking the Data Types\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_delta/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''DELTA''\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT,\n       [year] VARCHAR(15),\n       [month] VARCHAR(15)\n    )AS [result];'\n\n\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) \n    WITH (\n       tip_amount FLOAT,\n       trip_type INT,\n       [year] VARCHAR(10),\n       [month] VARCHAR(10)\n    )AS [result]\n\n\nSELECT\n    COUNT(DISTINCT payment_type) AS Demo\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\nSELECT\n    COUNT(DISTINCT payment_type) AS Demo\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\nWHERE [year] = '2020' AND [month] = '01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo File')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "SELECT 100;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Taxi Zones')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlssynnyctaxi.dfs.core.windows.net/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_severless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "SELECT * FROM sys.dm_external_data_processed;\n\nSELECT * FROM sys.configurations\nWHERE name LIKE 'Data Processed %';\n\nsp_set_data_processed_limit\n    @type = N'monthly', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 2\n\nsp_set_data_processed_limit\n    @type = N'weekly', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 1\n\nsp_set_data_processed_limit\n    @type = N'daily', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 1",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}