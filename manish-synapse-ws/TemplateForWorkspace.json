{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "manish-synapse-ws"
		},
		"manish-synapse-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'manish-synapse-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:manish-synapse-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_manishsynapsedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlssynnyctaxi.dfs.core.windows.net/"
		},
		"ls_serverless_sql_db_nyc_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:manish-synapse-ws-ondemand.sql.azuresynapse.net,1433"
		},
		"ls_serverless_sql_db_nyc_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"manish-synapse-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlssynnyctaxi.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1 Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delete Silver Taxi Zone Folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Taxi Zone Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Taxi Zone Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "calender"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_silver_calender"
					},
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calender",
								"usp_name": "silver.usp_silver_calender"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        LOCATION = 'silver/taxi_zone',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_manishsynapsedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_manishsynapsedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_manishsynapsedl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_manishsynapsedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_manishsynapsedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_manishsynapsedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_db_nyc_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_db_nyc_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/manish-synapse-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('manish-synapse-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/manish-synapse-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('manish-synapse-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n--------- Check for duplicates in the Taxi Zone Data\n-------------------------------------------------------------\n----- for locationid\nSELECT\n    LocationID,\n    COUNT(LocationID) AS 'No_of_Occurence'\nFROM \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS [result]\nGROUP BY LocationID\nHAVING COUNT(LocationID) > 1\nORDER BY LocationID;\n\n------ for borough column\nSELECT\n    Borough,\n    COUNT(Borough) AS 'No_of_Occurence'\nFROM \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS [result]\nGROUP BY Borough\nHAVING COUNT(Borough) > 1\nORDER BY Borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\nGO\n\nCREATE EXTERNAL TABLE silver.rate_code\n    WITH\n    (\n        LOCATION = 'silver/rate_code',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    rate_code_id, rate_code\nFROM OPENROWSET (\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDQUOTE = '0x0b',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(15)\n    );\n\nSELECT * FROM silver.rate_code;\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\nGO\n\nCREATE EXTERNAL TABLE silver.payment_type\n    WITH\n    (\n        LOCATION = 'silver/payment_type',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.vw_payment_type;\n\nSELECT * FROM silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Identify any data quality issues in trip total amount\n-------------------------------------------------------------\n\nSELECT\n    MIN(total_amount) AS 'Min_value',\n    MAX(total_amount) AS 'Max_value',\n    AVG(total_amount) AS 'Avg_value',\n    COUNT(1) AS 'total_number_of_records',\n    COUNT(total_amount) AS not_null_total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n\n\nSELECT\n   payment_type, COUNT(*) AS total_number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n-- WHERE total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n/*\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n    WITH\n    (\n        LOCATION = 'silver/trip_data_green',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.trip_data_green_csv;\n\nSELECT TOP(10) * FROM silver.trip_data_green;\n*/\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Identify number of trips made from each borough!\n-------------------------------------------------------------\n\n\nSELECT\n    zone.Borough,\n    COUNT(1) AS Number_Of_Trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data \nJOIN OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS zone\nON trip_data.PULocationID = zone.LocationID\nGROUP BY zone.Borough\nORDER BY Number_Of_Trips;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    [result].*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    WITH \n    (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    ) AS [result]\n    GO\n\nSELECT TOP(10) * FROM silver.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n-------------------------------------------------------------\n----- Number of trips made by duration in hours\n-------------------------------------------------------------\n\nSELECT\n    (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) AS from_hour,\n    (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1 AS to_hour,\n    COUNT(1) AS Number_Of_Trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\nGROUP BY (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60), (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1\nORDER BY (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60), (DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) / 60) + 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n----------------------------------------------------------------------------------------------\n------------------------ Campaigns Requirement\n----------------------------------------------------------------------------------------------\n\n\n/*\nSELECT\n    td.[year],\n    td.[month],\n    tz.Borough,\n    CONVERT(DATE,td.lpep_pickup_datetime) AS trip_date,\n    cal.day_name AS trip_day,\n    CASE WHEN cal.day_name IN ('Saturday','Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n    SUM(CASE WHEN pt.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n    SUM(CASE WHEN pt.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count\nFROM silver.vw_trip_data_green AS td\nJOIN silver.taxi_zone AS tz\nON tz.LocationID = td.pu_location_id\nJOIN silver.calender AS cal\nON cal.date = CONVERT(DATE,td.lpep_pickup_datetime)\nJOIN silver.payment_type AS pt\nON pt.payment_type = td.payment_type\nWHERE td.[year] = '2020' AND td.[month] = '01'\nGROUP BY td.[year],\n    td.[month],\n    tz.Borough,\n    CONVERT(DATE,td.lpep_pickup_datetime),\n    cal.day_name\n\n*/\n\n\nEXEC gold.usp_gold_trip_data_green '2020', '01'\nEXEC gold.usp_gold_trip_data_green '2020', '02'\nEXEC gold.usp_gold_trip_data_green '2020', '03'\nEXEC gold.usp_gold_trip_data_green '2020', '04'\nEXEC gold.usp_gold_trip_data_green '2020', '05'\nEXEC gold.usp_gold_trip_data_green '2020', '06'\nEXEC gold.usp_gold_trip_data_green '2020', '07'\nEXEC gold.usp_gold_trip_data_green '2020', '08'\nEXEC gold.usp_gold_trip_data_green '2020', '09'\nEXEC gold.usp_gold_trip_data_green '2020', '10'\nEXEC gold.usp_gold_trip_data_green '2020', '11'\nEXEC gold.usp_gold_trip_data_green '2020', '12'\nEXEC gold.usp_gold_trip_data_green '2021', '01'\nEXEC gold.usp_gold_trip_data_green '2021', '02'\nEXEC gold.usp_gold_trip_data_green '2021', '03'\nEXEC gold.usp_gold_trip_data_green '2021', '04'\nEXEC gold.usp_gold_trip_data_green '2021', '05'\nEXEC gold.usp_gold_trip_data_green '2021', '06'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n--------------------------------------------------------------------------------------------------------------------------\n----- Identify the percentage of cash and credit card trips by borough\n--------------------------------------------------------------------------------------------------------------------------\n\nSELECT\n    zone.borough,\n    COUNT(1) AS total_trips,\n    SUM(CASE WHEN trip_data.payment_type = 2 THEN 1 ELSE 0 END) AS cash_trips,\n    SUM(CASE WHEN trip_data.payment_type = 1 THEN 1 ELSE 0 END) AS card_trips,\n    ROUND((CAST(SUM(CASE WHEN trip_data.payment_type = 2 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(1))*100,2) AS cash_trips_percentage,\n    ROUND((CAST(SUM(CASE WHEN trip_data.payment_type = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(1))*100,2) AS card_trips_percentage\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data \nLEFT JOIN OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n       LocationID SMALLINT,\n       Borough VARCHAR(15),\n       Zone VARCHAR(50),\n       Service_Zone VARCHAR(15) 4\n    ) AS zone\nON trip_data.PULocationID = zone.LocationID\nJOIN\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(15) \n    ) AS payment\nON payment.payment_type = trip_data.payment_type\nWHERE trip_data.payment_type IN ('1','2')\nGROUP BY zone.borough\nORDER BY zone.borough\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    [result].*\nFROM\n    OPENROWSET (\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n        borough VARCHAR(15) 3,\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count INT,\n        trip_distance FLOAT,\n        trip_duration INT,\n        fare_amount FLOAT\n    )AS [result]\nGO\n\nSELECT * FROM gold.vw_trip_data_green\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlssynnyctaxi.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv', --https\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------------------- Examine the data types for the columns\n\nEXECUTE sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv'', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\n--------------------------------------------- Max Length of each of the columns\n\nSELECT\n    MAX(LEN(LocationID)) AS len_LocationID,\n    MAX(LEN(Borough)) AS len_Borough,\n    MAX(LEN(Zone)) AS len_Zone,\n    MAX(LEN(service_zone)) AS len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n---------------------------------------------  Use WITH Clause to provide explicit data types\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n\n---------------------------------------------  Using Stored Procedure to check the Data Types\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n        \n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]'\n\n\n--------------------------------------------- To check the Collations for our Database\n\nSELECT name, collation_name FROM sys.databases;\n\n\n--------------------------------------------- Specify the Collations with Columns\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    ) AS [result]\n\n\n--------------------------------------------- Specify the Collations with Database\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n--------------------------------------------- Specify the Query for Subset of Columns\n\n-- One Way\nSELECT\n    TOP(5) Borough,\n    Zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', --abfss for adls gen2,  look for the position of containor name\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n--- Another Way\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv', \n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    WITH (\n        Borough VARCHAR(15),\n        Zone VARCHAR(50)\n    ) AS [result]\n\n--------------------------------------------- Specify the Query for Subset of Columns (Without Headers)\n\n--- One Way\n\nSELECT\n    TOP(5) Borough , Zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]\n\n\n--- Another Way With Positions\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        Borough VARCHAR(15) 2,\n        Zone VARCHAR(50) 3\n    ) AS [result]\n\n--- Another Way With Positions (Changing Order of the Column)\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        -- Changing the order of the Column\n        Zone VARCHAR(50) 3,\n        Borough VARCHAR(15) 2\n    ) AS [result]\n\n\n--------------------------------------------- Skipping First Line (Which is Header)\n\nSELECT\n    TOP(5) *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        -- Changing columns to small case\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    ) AS [result]\n\n\n--------------------------------------------- Create External Data Source\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/'\n)\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/'\n)\n\n-- DROP EXTERNAL DATA SOURCE nyc_taxi_data;\n\n---------------------------------------------  Query with data source\n\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n    SELECT name, location FROM sys.external_data_sources;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/userdefine_stored_procedure_usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT [VendorID] AS vendor_id\n                ,[lpep_pickup_datetime]\n                ,[lpep_dropoff_datetime]\n                ,[store_and_fwd_flag]\n                ,[total_amount]\n                ,[payment_type]\n                ,[trip_type]\n                ,[congestion_surcharge]\n                ,[extra]\n                ,[mta_tax]\n                ,[tip_amount]\n                ,[tolls_amount]\n                ,[ehail_fee]\n                ,[improvement_surcharge]\n                ,[RatecodeID] AS rate_code_id\n                ,[PULocationID] AS pu_location_id\n                ,[DOLocationID] AS do_location_id\n                ,[passenger_count]\n                ,[trip_distance]\n                ,[fare_amount]\n        FROM bronze.vw_trip_data\n        WHERE year = ''' + @year + '''\n          AND month = ''' + @month + '''';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS(SELECT * FROM sys.external_data_sources WHERE name = 'nyc_taxi_src')\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH (\n    LOCATION = 'https://adlssynnyctaxi.dfs.core.windows.net/nyc-taxi-data'\n);\n\nSELECT [name],[location] FROM sys.external_data_sources;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nUSE nyc_taxi_discovery\n\nCREATE EXTERNAL DATA SOURCE calender_data\nWITH (\n    LOCATION = 'abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/calendar.csv'\n)\n\nSELECT name, location FROM sys.external_data_sources;\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@adlssynnyctaxi.dfs.core.windows.net/raw/calendar.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) AS [result]'\n\n\nSELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    AS Calender;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/userdefine_stored_procedure_usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT\n            td.[year],\n            td.[month],\n            tz.Borough,\n            CONVERT(DATE,td.lpep_pickup_datetime) AS trip_date,\n            cal.day_name AS trip_day,\n            CASE WHEN cal.day_name IN (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n            SUM(CASE WHEN pt.payment_type_desc = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n            SUM(CASE WHEN pt.payment_type_desc = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS dispatch_trip_count,\n            SUM(td.trip_distance) AS trip_distance,\n            SUM(DATEDIFF(MINUTE,td.lpep_pickup_datetime,td.lpep_dropoff_datetime)) AS trip_duration,\n            SUM(td.fare_amount) AS fare_amount\n        FROM silver.vw_trip_data_green AS td\n        JOIN silver.taxi_zone AS tz\n        ON tz.LocationID = td.pu_location_id\n        JOIN silver.calender AS cal\n        ON cal.date = CONVERT(DATE,td.lpep_pickup_datetime)\n        JOIN silver.payment_type AS pt\n        ON pt.payment_type = td.payment_type\n        JOIN silver.trip_type AS tt ON (td.trip_type = tt.trip_type)\n        WHERE td.[year] = ''' + @year + '''\n          AND td.[month] = ''' + @month + '''\n        GROUP BY td.[year],\n            td.[month],\n            tz.Borough,\n            CONVERT(DATE,td.lpep_pickup_datetime),\n            cal.day_name';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format')\n    CREATE EXTERNAL FILE FORMAT csv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS  (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            PARSER_VERSION = '2.0',\n            FIRST_ROW = 2,\n            ENCODING = 'UTF8',\n            USE_TYPE_DEFAULT = FALSE\n        )\n    );\n\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS  (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            PARSER_VERSION = '1.0',\n            FIRST_ROW = 2,\n            ENCODING = 'UTF8',\n            USE_TYPE_DEFAULT = FALSE\n        )\n    );\n\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS  (\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '\"',\n            PARSER_VERSION = '2.0',\n            FIRST_ROW = 2,\n            ENCODING = 'UTF8',\n            USE_TYPE_DEFAULT = FALSE\n        )\n    );\n\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n        WITH (\n            FORMAT_TYPE = DELIMITEDTEXT,\n            FORMAT_OPTIONS (\n                FIELD_TERMINATOR = '\\t',\n                STRING_DELIMITER = '\"',\n                PARSER_VERSION = '1.0',\n                FIRST_ROW = 2,\n                ENCODING = 'UTF8',\n                USE_TYPE_DEFAULT = FALSE\n            )\n        );\n\n\n---- PARQUET FILE FORMAT\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n        WITH (\n            FORMAT_TYPE = PARQUET,\n            DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n        );\n\n---- DELTA FILE FORMAT\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name = 'delta_file_format')\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n        WITH (\n            FORMAT_TYPE = DELTA,\n            DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n        );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n---- ESCAPE Character file\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\\\',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n----- QUOTE Field\n\nSELECT\n    *\nFROM\n    OPENROWSET (\n        BULK 'vendor.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDQUOTE = '\"',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS vendor\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silve_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/userdefine_stored_procedure_usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        WITH\n        (\n            LOCATION = 'silver/taxi_zone',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM bronze.taxi_zone;\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone\n\n----------------------------------------------------------------------------\n---------Create Taxi Zone Table\n----------------------------------------------------------------------------\n\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )\n    WITH (\n        LOCATION = 'raw/taxi_zone.csv',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'Rejections/taxi_zone'\n    );\n\nSELECT TOP(10) * FROM bronze.taxi_zone;\n\n----------------------------------------------------------------------------\n---------Create Calender Table\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.calender') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calender\n\nCREATE EXTERNAL TABLE bronze.calender\n    (\n        date_key INT,\n        [date] date,\n        [year] SMALLINT,\n        [MONTH] TINYINT,\n        [day] TINYINT,\n        day_name VARCHAR(10) ,\n        day_of_year SMALLINT,\n        week_of_month TINYINT,\n        week_of_year TINYINT,\n        month_name VARCHAR(10),\n        year_month INT,\n        year_week INT\n    )\n    WITH (\n        LOCATION = 'raw/calendar.csv',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'Rejections/calender'\n    );\n\nSELECT TOP(10) * FROM bronze.calender\n\nSELECT * FROM sys.external_tables\n----------------------------------------------------------------------------\n---------Create Calender Table\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor\n\nCREATE EXTERNAL TABLE bronze.vendor\n    (\n        vendor_id TINYINT,\n        vendor_name VARCHAR(50)\n    )\n    WITH (\n        LOCATION = 'raw/vendor.csv',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'Rejections/vendor'\n    );\n\nSELECT * FROM bronze.vendor;\n\n----------------------------------------------------------------------------\n---------Create Trip Type Table\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type\n\nCREATE EXTERNAL TABLE bronze.trip_type\n    (\n        trip_type TINYINT,\n        trip_type_desc VARCHAR(50)\n    )\n    WITH (\n        LOCATION = 'raw/trip_type.tsv',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = tsv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'Rejections/trip_type'\n    );\n\nSELECT * FROM bronze.trip_type\n\n----------------------------------------------------------------------------\n---------Create Trip Data Green Table\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n    (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fed_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount float,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = csv_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_csv\n\n----------------------------------------------------------------------------\n---------Create Trip Data Green Table (PARQUET)\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n    (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fed_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount float,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_parquet\n\n----------------------------------------------------------------------------\n---------Create Trip Data Green Table (DELTA)\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n    (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fed_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount float,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )\n    WITH (\n        LOCATION = 'raw/trip_data_green_delta',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = delta_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_delta\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_tsv_taxi_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "Use nyc_taxi_discovery;\n\nSELECT\n    TOP(10) *\nFROM \n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '\\t',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/userdefine_stored_procedure_usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROC silver.usp_silver_calender\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.calender') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calender;\n\n    CREATE EXTERNAL TABLE silver.calender\n        WITH\n        (\n            LOCATION = 'silver/calender',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM bronze.calender;\n\nEND;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n----------------------------------------------------------------------------\n---------Create Rate Code(JSON) bronze View\n----------------------------------------------------------------------------\n\n\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT\n    rate_code_id,rate_code\nFROM \n    OPENROWSET (\n        BULK 'raw/rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0b',\n        PARSER_VERSION = '1.0'\n    )\n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH\n    (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(15)\n    )\nGO\n\nSELECT * FROM bronze.vw_rate_code\nGO\n\n\n----------------------------------------------------------------------------\n---------Create Payment Type(JSON) bronze View\n----------------------------------------------------------------------------\n\nIF OBJECT_ID('bronze.vw_payment_type') IS NOT NULL\n    DROP VIEW bronze.vw_payment_type\nGO\n\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT\n    payment_type,payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(15)\n    )\nGO\n\nSELECT * FROM bronze.vw_payment_type\nGO\n\n\n----------------------------------------------------------------------------\n---------Create Trip Data Green CSV bronze View\n----------------------------------------------------------------------------\n\nDROP VIEW IF EXISTS bronze.vw_trip_data\nGO\n\nCREATE VIEW bronze.vw_trip_data\nAS\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    [result].*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH \n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    ) AS [result]\nGO\n\nSELECT TOP(100) * FROM bronze.vw_trip_data\nGO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "Use nyc_taxi_discovery;\n\n\n------ Single Line JSON usin JSON_VALUE\n\nSELECT\n    CAST(JSON_VALUE(jsonDoc,'$.payment_type') AS SMALLINT) AS payment_type,\n    CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc') AS VARCHAR(15)) AS payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    CAST(JSON_VALUE(jsonDoc,''$.payment_type'') AS SMALLINT) AS payment_type,\n    CAST(JSON_VALUE(jsonDoc,''$.payment_type_desc'') AS VARCHAR(15)) AS payment_type_desc\nFROM\n    OPENROWSET(\n        BULK ''payment_type.json'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''1.0'' ,\n        FIELDTERMINATOR = ''0x0b'',\n        FIELDQUOTE = ''0x0b'',\n        ROWTERMINATOR = ''0x0a''\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];'\n\n\n------ Single Line JSON usin OPENJSON( Far more efficient than JSON_VALUE)\n\nSELECT\n    payment_type,[description]\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        [description] VARCHAR(15) '$.payment_type_desc '\n    );\n\n------------------------------------------------------------------------------ \n-------------  JSON that contains ARRAY\n------------------------------------------------------------------------------ \n\n--- Using JSON_VALUE\nSELECT\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type') AS SMALLINT) AS payment_type,\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc[0].value') AS VARCHAR(15)) AS payment_type_desc_0,\n   CAST(JSON_VALUE(jsonDoc,'$.payment_type_desc[1].value') AS VARCHAR(15)) AS payment_type_desc_1\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result];\n\n\n----Using OPENJSON\n\nSELECT\n   payment_type, payment_type_desc_value\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH (\n        jsonDoc VARCHAR(MAX)\n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) AS JSON\n    )\n    CROSS APPLY OPENJSON(payment_type_desc)\n    WITH (\n        sub_type SMALLINT,\n        payment_type_desc_value VARCHAR(15) '$.value'\n    );\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/userdefine_stored_procedure_usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n        WITH\n        (\n            LOCATION = 'silver/trip_type',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT\n        *\n    FROM bronze.trip_type;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silve_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        LOCATION = 'silver/taxi_zone',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.taxi_zone;\n\nSELECT * FROM silver.taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyx_taxi_discovery;\n\n------------------------------------------------------------------------------ \n-------------  Query Standard JSON\n------------------------------------------------------------------------------ \n\nSELECT\n    rate_code_id,rate_code\nFROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0' ,\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'  --- vertical tab\n    ) \n    WITH (\n        jsonDoc NVARCHAR(MAX) \n    )\n    AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(15)\n    );\n\n\n------------------------------------------------------------------------------ \n-------------  Query Standard JSON\n------------------------------------------------------------------------------\n\nSELECT\n    rate_code_id,rate_code_desc\nFROM\n    OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0b'     ---- '0x0b' is vertical Tab\n    ) \n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    )AS [result]\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id TINYINT,\n        rate_code_desc VARCHAR(15) '$.rate_code'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.calender') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calender\nGO\n\nCREATE EXTERNAL TABLE silver.calender\n    WITH\n    (\n        LOCATION = 'silver/calender',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.calender;\n\nSELECT * FROM bronze.calender;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n------------------------------ Select data from a file\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) AS [result]'\n\n------------------------------ Select data from a folder\n\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',  -----Selecting all csv file in a folder\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ Select data from a subfolder\n\nSELECT\n    TOP(10) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',  --- Selecting all subfolders and all files in subfolder (**)\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------ Select data from more than one file\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv','trip_data_green_csv/year=2020/month=03/*.csv'),  ---- giving list of files in BULK attribute\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ Select data from all subfolder and all year, all csv files\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n------------------------------ File metadata function filename()\n\nSELECT\n    TOP(100)\n    [result].filename() AS file_name,\n    [result].*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n------------------------------ To see how many records in each file\n\nSELECT\n    [result].filename() AS file_name,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nGROUP BY [result].filename()\nORDER BY [result].filename()\n\n------------------------------ To see how many records in subset of file\nSELECT\n    [result].filename() AS file_name,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename()\nORDER BY [result].filename()\n\n\n------------------------------ Use filepath function\n\nSELECT\n    [result].filename() AS file_name,\n    [result].filepath() AS file_path,\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename(),[result].filepath()\nORDER BY [result].filename(),[result].filepath() \n\n------------------------------ Use filepath function to get year and month\n\nSELECT\n    [result].filename() AS file_name,\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filename() IN ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP BY [result].filename(),[result].filepath(1),[result].filepath(2)\nORDER BY [result].filename(),[result].filepath(1),[result].filepath(2) \n\n-----------\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2) \n\n------------------------------ Use FILEPATH function in WHERE clause\n\nSELECT\n    [result].filepath(1) AS [year],\n    [result].filepath(2) AS [month],\n    COUNT(*) AS total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\nWHERE [result].filepath(2) IN ('01','02','03') AND [result].filepath(1) = '2020'\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2) \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\nGO\n\nCREATE EXTERNAL TABLE silver.vendor\n    WITH\n    (\n        LOCATION = 'silver/vendor',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.vendor;\n\nSELECT * FROM silver.vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result];\n\n---- Look for Data Types\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS [result]';\n\n----- Defining Columns and their Data Types\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result];\n\n\n------- Checking data scanned\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       tip_amount FLOAT,\n       trip_type INT\n    )\n    AS [result];\n\n\n\n---------------------------------------------------------------------------------------\n----------------------  ASSIGNMENTS\n---------------------------------------------------------------------------------------\n\n------ 1. Query from folders using wildcard characters\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result];\n\n------ 2. Using filename function\n\nSELECT\n    [result].filename() As File_name,\n    COUNT(1) AS Total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\nGROUP BY [result].filename()\nORDER BY [result].filename();\n\n------ 3. Querying from subfolders\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',   --- ** to query subfolders\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\n\n------ 4. use filepath to select only from certain pertitions\n\nSELECT\n    [result].filepath(1) As [year],\n    [result].filepath(2) AS [month],\n    COUNT(1) AS Total_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT\n    )\n    AS [result]\nWHERE [result].filepath(1) = '2020' AND ([result].filepath(2) BETWEEN '01' AND '04')\nGROUP BY [result].filepath(1),[result].filepath(2)\nORDER BY [result].filepath(1),[result].filepath(2);\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\nGO\n\nCREATE EXTERNAL TABLE silver.trip_type\n    WITH\n    (\n        LOCATION = 'silver/trip_type',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT\n    *\nFROM bronze.trip_type;\n\nSELECT * FROM silver.trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\n----- Checking the Data Types\n\nEXEC sp_describe_first_result_set N'\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_delta/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''DELTA''\n    ) \n    WITH (\n       VendorID INT,\n       lpep_pickup_datetime DATETIME2(7),\n       lpep_dropoff_datetime DATETIME2(7),\n       store_and_fwd_flag CHAR(1),\n       RatecodeID INT,\n       PULocationID INT,\n       DOLocationID INT,       \n       passenger_count INT,\n       trip_distance FLOAT,\n       fare_amount FLOAT,\n       extra FLOAT,\n       mta_tax FLOAT,\n       tip_amount FLOAT,\n       tolls_amount FLOAT,\n       ehail_fee INT,\n       improvement_surcharge FLOAT,\n       total_amount FLOAT,\n       payment_type INT,\n       trip_type INT,\n       congestion_surcharge FLOAT,\n       [year] VARCHAR(15),\n       [month] VARCHAR(15)\n    )AS [result];'\n\n\n\nSELECT\n    TOP(100) *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) \n    WITH (\n       tip_amount FLOAT,\n       trip_type INT,\n       [year] VARCHAR(10),\n       [month] VARCHAR(10)\n    )AS [result]\n\n\nSELECT\n    COUNT(DISTINCT payment_type) AS Demo\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result];\n\nSELECT\n    COUNT(DISTINCT payment_type) AS Demo\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\nWHERE [year] = '2020' AND [month] = '01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo File')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "SELECT 100;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Taxi Zones')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlssynnyctaxi.dfs.core.windows.net/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_severless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "SELECT * FROM sys.dm_external_data_processed;\n\nSELECT * FROM sys.configurations\nWHERE name LIKE 'Data Processed %';\n\nsp_set_data_processed_limit\n    @type = N'monthly', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 2\n\nsp_set_data_processed_limit\n    @type = N'weekly', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 1\n\nsp_set_data_processed_limit\n    @type = N'daily', -- 'N' in T-SQL stands for National Language or Unicode. It indicates that the string is a Unicode string literal.\n    @limit_to = 1",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}